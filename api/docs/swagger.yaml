definitions:
  chords_com_api_internal_dto.CreateSongRequest:
    properties:
      artists:
        items:
          type: string
        type: array
      composers:
        items:
          type: string
        type: array
      format:
        $ref: '#/definitions/chords_com_api_internal_entity.SheetFormat'
      sheet:
        type: string
      title:
        type: string
    required:
    - format
    - sheet
    - title
    type: object
  chords_com_api_internal_dto.SearchArtistRequest:
    properties:
      cursor_after:
        type: string
      cursor_before:
        type: string
      library_type:
        $ref: '#/definitions/chords_com_api_internal_entity.LibraryType'
      limit:
        maximum: 100
        minimum: 1
        type: integer
      query:
        type: string
      return_rows:
        default: true
        type: boolean
      return_total:
        default: true
        type: boolean
    type: object
  chords_com_api_internal_dto.SearchSongRequest:
    properties:
      artist_id:
        type: integer
      cursor_after:
        type: string
      cursor_before:
        type: string
      library_id:
        type: integer
      library_type:
        $ref: '#/definitions/chords_com_api_internal_entity.LibraryType'
      limit:
        maximum: 100
        minimum: 1
        type: integer
      query:
        type: string
      return_rows:
        default: true
        type: boolean
      return_total:
        default: true
        type: boolean
    type: object
  chords_com_api_internal_dto.UpdateSongRequest:
    properties:
      sheet:
        type: string
    required:
    - sheet
    type: object
  chords_com_api_internal_entity.Artist:
    properties:
      compositions:
        items:
          $ref: '#/definitions/chords_com_api_internal_entity.Song'
        type: array
      created_at:
        type: string
      deleted_at:
        example: "2025-06-18T15:04:05Z"
        type: string
      id:
        type: integer
      name:
        type: string
      songs:
        items:
          $ref: '#/definitions/chords_com_api_internal_entity.Song'
        type: array
      updated_at:
        type: string
    required:
    - created_at
    - id
    - name
    - updated_at
    type: object
  chords_com_api_internal_entity.ArtistInfo:
    properties:
      compositions:
        items:
          $ref: '#/definitions/chords_com_api_internal_entity.Song'
        type: array
      created_at:
        type: string
      cursor:
        description: Used for pagination
        type: string
      deleted_at:
        example: "2025-06-18T15:04:05Z"
        type: string
      id:
        type: integer
      name:
        type: string
      songs:
        items:
          $ref: '#/definitions/chords_com_api_internal_entity.Song'
        type: array
      updated_at:
        type: string
    required:
    - created_at
    - id
    - name
    - updated_at
    type: object
  chords_com_api_internal_entity.ArtistsList:
    properties:
      entities:
        items:
          $ref: '#/definitions/chords_com_api_internal_entity.ArtistInfo'
        type: array
      total:
        type: integer
    type: object
  chords_com_api_internal_entity.JoinRoomRequest:
    properties:
      room_code:
        type: string
    type: object
  chords_com_api_internal_entity.Library:
    properties:
      artists:
        items:
          $ref: '#/definitions/chords_com_api_internal_entity.Artist'
        type: array
      created_at:
        type: string
      deleted_at:
        example: "2025-06-18T15:04:05Z"
        type: string
      id:
        type: integer
      name:
        type: string
      ownerID:
        type: integer
      songs:
        items:
          $ref: '#/definitions/chords_com_api_internal_entity.Song'
        type: array
      type:
        $ref: '#/definitions/chords_com_api_internal_entity.LibraryType'
      updated_at:
        type: string
    required:
    - created_at
    - id
    - updated_at
    type: object
  chords_com_api_internal_entity.LibraryType:
    enum:
    - public
    - favorites
    - private
    type: string
    x-enum-comments:
      LibraryType_Favorites: user's favorite songs
      LibraryType_Private: only the owner can access
      LibraryType_Public: anyone can access
    x-enum-varnames:
    - LibraryType_Public
    - LibraryType_Favorites
    - LibraryType_Private
  chords_com_api_internal_entity.Room:
    properties:
      code:
        type: string
      created_at:
        type: string
      deleted_at:
        example: "2025-06-18T15:04:05Z"
        type: string
      id:
        type: integer
      ownerID:
        type: integer
      state: {}
      updated_at:
        type: string
      users:
        items:
          $ref: '#/definitions/chords_com_api_internal_entity.User'
        type: array
    required:
    - created_at
    - id
    - updated_at
    type: object
  chords_com_api_internal_entity.SheetFormat:
    enum:
    - chordpro
    - chords_over_words
    type: string
    x-enum-varnames:
    - SheetFormat_Chordpro
    - SheetFormat_ChordsOverWords
  chords_com_api_internal_entity.Song:
    properties:
      artists:
        items:
          $ref: '#/definitions/chords_com_api_internal_entity.Artist'
        type: array
      composers:
        items:
          $ref: '#/definitions/chords_com_api_internal_entity.Artist'
        type: array
      created_at:
        type: string
      deleted_at:
        example: "2025-06-18T15:04:05Z"
        type: string
      format:
        $ref: '#/definitions/chords_com_api_internal_entity.SheetFormat'
      id:
        type: integer
      owner_id:
        description: ID of the user who uploaded this song
        type: integer
      sheet:
        type: string
      title:
        type: string
      updated_at:
        type: string
    required:
    - created_at
    - format
    - id
    - sheet
    - title
    - updated_at
    type: object
  chords_com_api_internal_entity.SongInfo:
    properties:
      artists:
        items:
          $ref: '#/definitions/chords_com_api_internal_entity.Artist'
        type: array
      composers:
        items:
          $ref: '#/definitions/chords_com_api_internal_entity.Artist'
        type: array
      created_at:
        type: string
      cursor:
        description: Used for pagination
        type: string
      deleted_at:
        example: "2025-06-18T15:04:05Z"
        type: string
      format:
        $ref: '#/definitions/chords_com_api_internal_entity.SheetFormat'
      id:
        type: integer
      owner_id:
        description: ID of the user who uploaded this song
        type: integer
      sheet:
        type: string
      title:
        type: string
      updated_at:
        type: string
    required:
    - created_at
    - format
    - id
    - sheet
    - title
    - updated_at
    type: object
  chords_com_api_internal_entity.SongsList:
    properties:
      entities:
        items:
          $ref: '#/definitions/chords_com_api_internal_entity.SongInfo'
        type: array
      total:
        type: integer
    type: object
  chords_com_api_internal_entity.UpdateRoomRequest:
    properties:
      state: {}
    type: object
  chords_com_api_internal_entity.User:
    properties:
      created_at:
        type: string
      deleted_at:
        example: "2025-06-18T15:04:05Z"
        type: string
      id:
        type: integer
      myLibraries:
        items:
          $ref: '#/definitions/chords_com_api_internal_entity.Library'
        type: array
      myRooms:
        items:
          $ref: '#/definitions/chords_com_api_internal_entity.Room'
        type: array
      mySongs:
        items:
          $ref: '#/definitions/chords_com_api_internal_entity.Song'
        type: array
      rooms:
        items:
          $ref: '#/definitions/chords_com_api_internal_entity.Room'
        type: array
      status:
        $ref: '#/definitions/chords_com_api_internal_entity.UserStatus'
      updated_at:
        type: string
    required:
    - created_at
    - id
    - updated_at
    type: object
  chords_com_api_internal_entity.UserStatus:
    enum:
    - anonymous
    - waiting_for_confirmation
    - active
    type: string
    x-enum-varnames:
    - UserStatus_Anonymous
    - UserStatus_WaitingForConfirmation
    - UserStatus_Active
  chords_com_api_internal_event_bus.Event:
    properties:
      context:
        description: Optional context for the event, client specific
        type: string
      data:
        description: Client specific event data
      origin:
        description: ID of the client that originated the event
        type: integer
      type:
        description: Client specific event type
        type: string
    type: object
  internal_app.AuthResponse:
    properties:
      link:
        description: TODO remove when email confirmation is implemented
        type: string
    type: object
  internal_app.EmailAuthRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  internal_app.LoginResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
      user_id:
        type: integer
    type: object
  internal_app.RefreshTokenRequest:
    properties:
      refresh_token:
        type: string
    type: object
info:
  contact: {}
  description: This is a Chords server.
  title: Chords API
  version: "1.0"
paths:
  /api/artists/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve an artist by its ID
      operationId: getArtistByID
      parameters:
      - description: Artist ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/chords_com_api_internal_entity.Artist'
      summary: Get artist by ID
      tags:
      - Artists
  /api/artists/search:
    post:
      consumes:
      - application/json
      description: Search for artists using various parameters with pagination support.
      operationId: searchArtists
      parameters:
      - description: Search Artist Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/chords_com_api_internal_dto.SearchArtistRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Search results
          schema:
            $ref: '#/definitions/chords_com_api_internal_entity.ArtistsList'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Search for artists
      tags:
      - Artists
  /api/auth/anonymous:
    post:
      consumes:
      - application/json
      description: Create an anonymous access token
      operationId: anonymousLogIn
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_app.LoginResponse'
      summary: Anonymous Log In
      tags:
      - Auth
  /api/auth/confirm/{code}:
    post:
      consumes:
      - application/json
      description: Confirm email authentication using action code
      operationId: confirmAuth
      parameters:
      - description: Action Code
        in: path
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_app.LoginResponse'
      summary: Confirm Email Authentication
      tags:
      - Auth
  /api/auth/email:
    post:
      consumes:
      - application/json
      description: Authenticate with email without password, send sign-in link
      operationId: emailAuth
      parameters:
      - description: Email Auth Request
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/internal_app.EmailAuthRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_app.AuthResponse'
      summary: Email Authentication
      tags:
      - Auth
  /api/auth/refresh-token:
    post:
      description: Refresh an access token using a refresh token
      operationId: refreshToken
      parameters:
      - description: Refresh Token Request
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/internal_app.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_app.LoginResponse'
      summary: Refresh Access Token
      tags:
      - Auth
  /api/rooms:
    post:
      consumes:
      - application/json
      description: Create a new room with a unique code and add the user to it.
      operationId: createRoom
      produces:
      - application/json
      responses:
        "201":
          description: Room created successfully
          schema:
            $ref: '#/definitions/chords_com_api_internal_entity.Room'
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Create a new room
      tags:
      - Rooms
  /api/rooms/{id}:
    patch:
      consumes:
      - application/json
      description: Update the state of a room.
      operationId: updateRoom
      parameters:
      - description: Room ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update Room Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/chords_com_api_internal_entity.UpdateRoomRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Room updated successfully
          schema:
            $ref: '#/definitions/chords_com_api_internal_entity.Room'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Update a room
      tags:
      - Rooms
  /api/rooms/{id}/leave:
    post:
      consumes:
      - application/json
      description: Leave a room using the room ID.
      operationId: leaveRoom
      parameters:
      - description: Room ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: Room left successfully
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Leave a room
      tags:
      - Rooms
  /api/rooms/join:
    post:
      consumes:
      - application/json
      description: Join a room using the room code.
      operationId: joinRoom
      parameters:
      - description: Join Room Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/chords_com_api_internal_entity.JoinRoomRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Room joined successfully
          schema:
            $ref: '#/definitions/chords_com_api_internal_entity.Room'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Join a room
      tags:
      - Rooms
  /api/songs:
    put:
      consumes:
      - application/json
      description: Create a new song with the provided details
      operationId: createSong
      parameters:
      - description: Song details
        in: body
        name: song
        required: true
        schema:
          $ref: '#/definitions/chords_com_api_internal_dto.CreateSongRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/chords_com_api_internal_entity.Song'
      summary: Create a new song
      tags:
      - Songs
  /api/songs/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve a song by its ID
      operationId: getSongByID
      parameters:
      - description: Song ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/chords_com_api_internal_entity.Song'
      summary: Get song by ID
      tags:
      - Songs
    patch:
      consumes:
      - application/json
      description: Update the details of an existing song
      operationId: updateSong
      parameters:
      - description: Song ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated song details
        in: body
        name: song
        required: true
        schema:
          $ref: '#/definitions/chords_com_api_internal_dto.UpdateSongRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/chords_com_api_internal_entity.Song'
      summary: Update an existing song
      tags:
      - Songs
  /api/songs/search:
    post:
      consumes:
      - application/json
      description: Search for songs using various parameters.
      operationId: searchSongs
      parameters:
      - description: Search Song Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/chords_com_api_internal_dto.SearchSongRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Search results
          schema:
            $ref: '#/definitions/chords_com_api_internal_entity.SongsList'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Search songs
      tags:
      - Songs
  /ws:
    post:
      consumes:
      - application/json
      description: This is a placeholder - only for OpenAPI documentation purposes.
      parameters:
      - description: Request body
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/chords_com_api_internal_event_bus.Event'
      produces:
      - application/json
      responses:
        "200":
          description: WebSocket event
          schema:
            $ref: '#/definitions/chords_com_api_internal_event_bus.Event'
      security:
      - BearerAuth: []
      summary: Post WebSocket Handler
      tags:
      - WebSocket
swagger: "2.0"
